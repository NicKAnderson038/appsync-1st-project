# service: appsync-1st-project # NOTE: update this with your service name
service: ${self:custom.config.service-name}

plugins:
  - serverless-plugin-include-dependencies
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

custom:
  region: ${opt:region, self:provider.region}
  myStage: ${opt:stage, self:provider.stage}
  config: ${file(./config/serviceConfig.yml)}
  # configSettings: ${file(./env/${self:provider.stage}.yml)}
  myProfile:
    dev: default
    staging: default
    prod: default

  accountId: #{AWS::AccountId}
  appSync:
    name: appsync-1st-project-api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: API_KEY
    # logConfig:
    #   loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
    #   level: ERROR # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: DynamoDbCommentDS
        type: Event
        field: comments
        request: comments-request-mapping-template.vtl
        response: comments-response-mapping-template.vtl

      - dataSource: DynamoDbEventDS
        type: Mutation
        field: createEvent
        request: createEvent-request-mapping-template.vtl
        response: createEvent-response-mapping-template.vtl

      # - dataSource: DynamoDbCommentDS
      #   type: Mutation
      #   field: createEvent
      #   request: createEvent-request-mapping-template.vtl
      #   response: createEvent-response-mapping-template.vtl

      - dataSource: DynamoDbEventDS
        type: Mutation
        field: deleteEvent
        request: deleteEvent-request-mapping-template.vtl
        response: deleteEvent-response-mapping-template.vtl

      # - dataSource: DynamoDbCommentDS
      #   type: Mutation
      #   field: deleteEvent
      #   request: deleteEvent-request-mapping-template.vtl
      #   response: deleteEvent-response-mapping-template.vtl

      - dataSource: DynamoDbCommentDS
        type: Mutation
        field: commentOnEvent
        request: commentOnEvent-request-mapping-template.vtl
        response: commentOnEvent-response-mapping-template.vtl

      # - dataSource: DynamoDbEventDS
      #   type: Mutation
      #   field: commentOnEvent
      #   request: commentOnEvent-request-mapping-template.vtl
      #   response: commentOnEvent-response-mapping-template.vtl

      - dataSource: DynamoDbEventDS
        type: Query
        field: getEvent
        request: getEvent-request-mapping-template.vtl
        response: getEvent-response-mapping-template.vtl

      # - dataSource: DynamoDbCommentDS
      #   type: Query
      #   field: getEvent
      #   request: getEvent-request-mapping-template.vtl
      #   response: getEvent-response-mapping-template.vtl

      - dataSource: DynamoDbEventDS
        type: Query
        field: listEvents
        request: listEvents-request-mapping-template.vtl
        response: listEvents-response-mapping-template.vtl

      # - dataSource: DynamoDbCommentDS
      #   type: Query
      #   field: listEvents
      #   request: listEvents-request-mapping-template.vtl
      #   response: listEvents-response-mapping-template.vtl

      # - dataSource: awsLambdaDataSource
      #   type: Query
      #   field: helloWorld
      #   request: helloWorld-request-mapping-template.vtl
      #   response: helloWorld-response-mapping-template.vtl

    schema: # defaults schema.graphql
    # serviceRole: "AppSyncServiceRole"
    serviceRole: "AppSyncDynamoDBServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: DynamoDbCommentDS
        description: 'comments dynamo table'
        config:
          tableName: { Ref: DynamoDbComment }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
          # serviceRoleArn: "arn:aws:iam::#{AWS::AccountId}:role/DynamoDB-${self:custom.appSync.serviceRole}"
          # iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
          #   - Effect: "Allow"
          #     Action:
          #       - dynamodb:GetItem
          #       - dynamodb:PutItem
          #       - dynamodb:DeleteItem
          #       - dynamodb:UpdateItem
          #       - dynamodb:Query
          #       - dynamodb:Scan
          #     Resource:
          #       # - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:COMMENT_TABLE:"
          #       # - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:COMMENT_TABLE:/*"
          #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENT_TABLE}"
          #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENT_TABLE/*}"
               
      
      - type: AMAZON_DYNAMODB
        name: DynamoDbEventDS
        description: 'events dynamo table'
        config:
          tableName: { Ref: DynamoDbEvent }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
          # serviceRoleArn: "arn:aws:iam::#{AWS::AccountId}:role/DynamoDB-${self:custom.appSync.serviceRole}"
          # iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
          #   - Effect: "Allow"
          #     Action:
          #       - dynamodb:GetItem
          #       - dynamodb:PutItem
          #       - dynamodb:DeleteItem
          #       - dynamodb:UpdateItem
          #       - dynamodb:Query
          #       - dynamodb:Scan
          #     Resource:
          #       # - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:EVENT_TABLE:"
          #       # - "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:EVENT_TABLE:/*"
          #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}"
          #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE/*}"
               

      # - type: AWS_LAMBDA
      #   name: awsLambdaDataSource
      #   description: 'Lambda DataSource'
      #   config:
      #     lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql
      #     serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources
        
      

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  profile: ${self:custom.myProfile.${self:custom.myStage}}
  region: us-east-1
  stackTags:
    STACK: ${self:service}
    REGION: ${self:custom.region}
  environment:
    COMMENT_TABLE: "AppSyncCommentTable-b2345"
    EVENT_TABLE: "AppSyncEventTable-b2345"
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - s3:GetObject
  #       - s3:PutObject
  #     Resource: "*"
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource:
  #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENT_TABLE}"
  #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE}"
  #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMMENT_TABLE/*}"
  #       - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EVENT_TABLE/*}"

functions: ${file(./config/functions.yml)}

resources:
  Resources: ${file(./config/resources.yml)}